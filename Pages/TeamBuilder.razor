@page "/team-builder"
@using CricketVerse.Services
@using CricketVerse.Models
@attribute [Authorize]
@inject LanguageService LanguageService
@inject NavigationManager NavigationManager
@inject WalletService WalletService
@inject ToastService ToastService
@inject PlayerService PlayerService
@inject TeamService TeamService
@implements IDisposable

<div class="container mt-4">
    @if (IsLoading)
    {
        <div class="text-center p-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3">@LanguageService.GetTranslation("LoadingData")</p>
        </div>
    }
    else
    {
        <div class="content-card rounded-4 shadow-sm">
            <h2 class="mb-4">
                <i class="fas fa-users text-primary me-2"></i>
                @LanguageService.GetTranslation("PSLDreamXI")
            </h2>

            <!-- Team Progress -->
            <div class="progress mb-4 rounded-pill" style="height: 25px;">
                <div class="progress-bar bg-success rounded-pill" 
                     style="width: @(SelectedPlayers.Count * 9.09)%">
                    <span class="fw-bold">@SelectedPlayers.Count/11</span>
                </div>
            </div>

            <!-- Points and Budget Info -->
            <div class="row g-4 mb-4">
                <div class="col-md-3">
                    <div class="stats-card bg-primary bg-gradient text-white rounded-4">
                        <div class="card-body">
                            <h5>@LanguageService.GetTranslation("WalletBudget")</h5>
                            <h3 class="mb-0">@RemainingBudget.ToString("F1")M</h3>
                            <small class="text-white-50">@LanguageService.GetTranslation("FromWallet"): PKR @TotalBudget.ToString("N0")</small>
                            @if (TotalBudget < 50)
                            {
                                <button class="btn btn-sm btn-light mt-2 rounded-pill w-100" @onclick="NavigateToWallet">
                                    <i class="fas fa-plus me-1"></i> @LanguageService.GetTranslation("AddFunds")
                                </button>
                            }
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stats-card bg-success bg-gradient text-white rounded-4">
                        <div class="card-body">
                            <h5>@LanguageService.GetTranslation("Players")</h5>
                            <h3 class="mb-0">@SelectedPlayers.Count/11</h3>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stats-card bg-info bg-gradient text-white rounded-4">
                        <div class="card-body">
                            <h5>@LanguageService.GetTranslation("Points")</h5>
                            <h3 class="mb-0">@CurrentPoints</h3>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stats-card bg-warning bg-gradient text-white rounded-4">
                        <div class="card-body">
                            <h5>@LanguageService.GetTranslation("Cost")</h5>
                            <h3 class="mb-0">PKR @TeamCreationCost</h3>
                            <small class="text-white-50">@LanguageService.GetTranslation("TeamCreationCost")</small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Create Team Form -->
            <div class="mb-4">
                <div class="form-group mb-3">
                    <label for="teamName" class="form-label">@LanguageService.GetTranslation("TeamName")</label>
                    <input type="text" class="form-control form-control-lg rounded-pill" 
                           id="teamName" @bind="TeamName" 
                           placeholder="@LanguageService.GetTranslation("EnterTeamName")" />
                </div>

                <!-- Team Selection Rules -->
                <div class="alert alert-info rounded-4 mb-4">
                    <h5 class="alert-heading">
                        <i class="fas fa-info-circle me-2"></i>
                        @LanguageService.GetTranslation("SelectionRules")
                    </h5>
                    <ul class="mb-0">
                        <li>@LanguageService.GetTranslation("Rule1")</li>
                        <li>@LanguageService.GetTranslation("Rule2")</li>
                        <li>@LanguageService.GetTranslation("Rule3")</li>
                        <li>@LanguageService.GetTranslation("Rule4")</li>
                        <li>@LanguageService.GetTranslation("Rule5")</li>
                    </ul>
                </div>

                <!-- Search and Filters -->
                <div class="row mb-4">
                    <div class="col-md-6">
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="fas fa-search"></i>
                            </span>
                            <input type="text" class="form-control" 
                                   placeholder="@LanguageService.GetTranslation("SearchPlayers")"
                                   @bind="SearchQuery" 
                                   @bind:event="oninput" />
                        </div>
                    </div>
                    <div class="col-md-3">
                        <select class="form-select" @bind="TeamFilter">
                            <option value="">@LanguageService.GetTranslation("AllTeams")</option>
                            <option value="ISL">Islamabad United</option>
                            <option value="KAR">Karachi Kings</option>
                            <option value="LAH">Lahore Qalandars</option>
                            <option value="MUL">Multan Sultans</option>
                            <option value="PES">Peshawar Zalmi</option>
                            <option value="QUE">Quetta Gladiators</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <select class="form-select" @bind="SortBy">
                            <option value="points">@LanguageService.GetTranslation("SortByPoints")</option>
                            <option value="price">@LanguageService.GetTranslation("SortByPrice")</option>
                            <option value="name">@LanguageService.GetTranslation("SortByName")</option>
                        </select>
                    </div>
                </div>

                <!-- Selected Players Preview -->
                @if (SelectedPlayers.Any())
                {
                    <div class="selected-players mb-4">
                        <h5 class="mb-3">@LanguageService.GetTranslation("SelectedPlayers")</h5>
                        <div class="d-flex flex-wrap gap-2">
                            @foreach (var player in SelectedPlayers)
                            {
                                <div class="player-chip rounded-pill bg-light" @onclick="() => TogglePlayerSelection(player)">
                                    <div class="player-initial @GetRoleClass(player.Role)">
                                        @GetInitials(player.Name)
                                    </div>
                                    <span class="player-name">
                                        @player.Name
                                        @if (player == Captain)
                                        {
                                            <i class="fas fa-crown text-warning ms-1" title="Captain"></i>
                                        }
                                        @if (player == ViceCaptain)
                                        {
                                            <i class="fas fa-star text-info ms-1" title="Vice Captain"></i>
                                        }
                                    </span>
                                    <span class="player-team">@player.Team</span>
                                    <i class="fas fa-times-circle text-danger"></i>
                                </div>
                            }
                        </div>
                    </div>
                }

                <!-- Player Categories -->
                <div class="mb-4">
                    <ul class="nav nav-pills nav-fill mb-3">
                        @foreach (var category in PlayerCategories)
                        {
                            <li class="nav-item">
                                <button class="nav-link rounded-pill @(SelectedCategory == category ? "active" : "")"
                                        @onclick="@(() => SelectedCategory = category)">
                                    <i class="@GetCategoryIcon(category) me-2"></i>
                                    @LanguageService.GetTranslation(category)
                                </button>
                            </li>
                        }
                    </ul>

                    <div class="row g-4">
                        @foreach (var player in GetFilteredPlayers())
                        {
                            <div class="col-md-4 col-lg-3">
                                <div class="player-card @(SelectedPlayers.Contains(player) ? "selected" : "") 
                                                     @(!CanSelectPlayer(player) ? "disabled" : "")"
                                     @onclick="() => TogglePlayerSelection(player)">
                                    <div class="player-initial @GetRoleClass(player.Role)">
                                        @GetInitials(player.Name)
                                    </div>
                                    <div class="player-info">
                                        <h6 class="mb-1">@player.Name</h6>
                                        <div class="d-flex justify-content-between align-items-center">
                                            <span class="team-badge">@player.Team</span>
                                            <span class="price-badge">@player.Price.ToString("F1")M</span>
                                        </div>
                                        <div class="mt-2">
                                            <span class="points-badge">@player.Points pts</span>
                                            <span class="role-badge float-end">@player.Role</span>
                                        </div>
                                        <button class="btn btn-link btn-sm text-primary mt-2 w-100" @onclick="() => ShowPlayerStats(player)">
                                            <i class="fas fa-chart-line me-1"></i>
                                            @LanguageService.GetTranslation("ViewStats")
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Complete Team Button -->
                @if (SelectedPlayers.Count == 11)
                {
                    <div class="complete-team-overlay">
                        @if (Captain == null || ViceCaptain == null)
                        {
                            <div class="alert alert-warning rounded-4 mb-3">
                                <h5 class="alert-heading">
                                    <i class="fas fa-exclamation-circle me-2"></i>
                                    @LanguageService.GetTranslation("SelectCaptains")
                                </h5>
                                <div class="row g-3 mt-2">
                                    <div class="col-md-6">
                                        <label class="form-label">@LanguageService.GetTranslation("SelectCaptain")</label>
                                        <select class="form-select" @bind="CaptainId">
                                            <option value="">@LanguageService.GetTranslation("ChooseCaptain")</option>
                                            @foreach (var player in SelectedPlayers.Where(p => p != ViceCaptain))
                                            {
                                                <option value="@player.Id">@player.Name</option>
                                            }
                                        </select>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">@LanguageService.GetTranslation("SelectViceCaptain")</label>
                                        <select class="form-select" @bind="ViceCaptainId">
                                            <option value="">@LanguageService.GetTranslation("ChooseViceCaptain")</option>
                                            @foreach (var player in SelectedPlayers.Where(p => p != Captain))
                                            {
                                                <option value="@player.Id">@player.Name</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-success rounded-4 mb-3">
                                <h5 class="alert-heading">
                                    <i class="fas fa-check-circle me-2"></i>
                                    @LanguageService.GetTranslation("TeamComplete")
                                </h5>
                                <p class="mb-0">@LanguageService.GetTranslation("TeamCompleteMessage")</p>
                                <div class="mt-3">
                                    <p class="mb-2">
                                        <strong>@LanguageService.GetTranslation("Captain"):</strong> @Captain.Name
                                        <i class="fas fa-crown text-warning ms-1"></i>
                                    </p>
                                    <p class="mb-0">
                                        <strong>@LanguageService.GetTranslation("ViceCaptain"):</strong> @ViceCaptain.Name
                                        <i class="fas fa-star text-info ms-1"></i>
                                    </p>
                                </div>
                            </div>
                            <button class="btn btn-success btn-lg rounded-pill w-100" @onclick="SaveTeam" disabled="@IsSaving">
                                @if (IsSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>@LanguageService.GetTranslation("SavingTeam")</span>
                                }
                                else
                                {
                                    <i class="fas fa-save me-2"></i>
                                    <span>@LanguageService.GetTranslation("SaveTeam")</span>
                                    <small class="ms-2">(PKR @TeamCreationCost)</small>
                                }
                            </button>
                        }
                    </div>
                }
            </div>

            <!-- Existing Teams -->
            @if (Teams.Any())
            {
                <h3 class="mb-3">@LanguageService.GetTranslation("YourTeams")</h3>
                <div class="row g-4">
                    @foreach (var team in Teams)
                    {
                        <div class="col-md-6 col-lg-4">
                            <div class="team-card rounded-4">
                                <div class="team-header">
                                    <h5 class="mb-0">@team.Name</h5>
                                    <span class="points-badge">@team.Points pts</span>
                                </div>
                                <div class="team-body">
                                    <div class="selected-players mb-3">
                                        @foreach (var player in team.Players)
                                        {
                                            <div class="player-chip rounded-pill bg-light">
                                                <div class="player-initial @GetRoleClass(player.Role)">
                                                    @GetInitials(player.Name)
                                                </div>
                                                <span class="player-name">
                                                    @player.Name
                                                    @if (player == team.Captain)
                                                    {
                                                        <i class="fas fa-crown text-warning ms-1" title="Captain"></i>
                                                    }
                                                    @if (player == team.ViceCaptain)
                                                    {
                                                        <i class="fas fa-star text-info ms-1" title="Vice Captain"></i>
                                                    }
                                                </span>
                                                <span class="player-team">@player.Team</span>
                                            </div>
                                        }
                                    </div>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <button class="btn btn-danger btn-sm rounded-pill" @onclick="() => ConfirmDeleteTeam(team)">
                                            <i class="fas fa-trash me-2"></i>@LanguageService.GetTranslation("DeleteTeam")
                                        </button>
                                        <span class="value-badge">@team.Credits.ToString()M</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>

@if (ShowInsufficientFundsModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" @onclick="() => ShowInsufficientFundsModal = false">
        <div class="modal-dialog modal-dialog-centered" @onclick:stopPropagation>
            <div class="modal-content rounded-4">
                <div class="modal-header border-0">
                    <h5 class="modal-title">@LanguageService.GetTranslation("InsufficientFunds")</h5>
                    <button type="button" class="btn-close" @onclick="() => ShowInsufficientFundsModal = false"></button>
                </div>
                <div class="modal-body">
                    <p>@LanguageService.GetTranslation("InsufficientFundsMessage")</p>
                    <p class="mb-0">
                        <strong>@LanguageService.GetTranslation("Required"):</strong> PKR @TeamCreationCost
                    </p>
                </div>
                <div class="modal-footer border-0">
                    <button type="button" class="btn btn-secondary rounded-pill" @onclick="() => ShowInsufficientFundsModal = false">
                        @LanguageService.GetTranslation("Cancel")
                    </button>
                    <button type="button" class="btn btn-primary rounded-pill" @onclick="NavigateToWallet">
                        <i class="fas fa-wallet me-2"></i>@LanguageService.GetTranslation("AddFunds")
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@if (SelectedPlayerForStats != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" @onclick="HandleBackdropClick">
        <div class="modal-dialog modal-lg modal-dialog-centered" @onclick:stopPropagation>
            <div class="modal-content rounded-4">
                <div class="modal-header border-0">
                    <h5 class="modal-title">@LanguageService.GetTranslation("PlayerStats")</h5>
                    <button type="button" class="btn-close" @onclick="ClosePlayerStats"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-4 text-center">
                            <div class="player-initial @GetRoleClass(SelectedPlayerForStats.Role) mx-auto mb-3" style="width: 80px; height: 80px; font-size: 2rem;">
                                @GetInitials(SelectedPlayerForStats.Name)
                            </div>
                            <h4>@SelectedPlayerForStats.Name</h4>
                            <p class="text-muted">@SelectedPlayerForStats.Role</p>
                            <div class="team-badge d-inline-block">@SelectedPlayerForStats.Team</div>
                        </div>
                        <div class="col-md-8">
                            <div class="row g-3">
                                <div class="col-6">
                                    <div class="stats-card bg-primary bg-gradient text-white rounded-4">
                                        <div class="card-body">
                                            <h6>@LanguageService.GetTranslation("Points")</h6>
                                            <h3>@SelectedPlayerForStats.Points</h3>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="stats-card bg-success bg-gradient text-white rounded-4">
                                        <div class="card-body">
                                            <h6>@LanguageService.GetTranslation("Price")</h6>
                                            <h3>@SelectedPlayerForStats.Price.ToString("F1")M</h3>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="stats-card bg-info bg-gradient text-white rounded-4">
                                        <div class="card-body">
                                            <h6>@LanguageService.GetTranslation("AvgPoints")</h6>
                                            <h3>@(GetAveragePoints(SelectedPlayerForStats))</h3>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="stats-card bg-warning bg-gradient text-white rounded-4">
                                        <div class="card-body">
                                            <h6>@LanguageService.GetTranslation("SelectionRate")</h6>
                                            <h3>@(GetSelectionRate(SelectedPlayerForStats))%</h3>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <h6 class="mt-4">@LanguageService.GetTranslation("LastMatches")</h6>
                            <div class="last-matches">
                                @foreach (var score in GetLastMatchScores(SelectedPlayerForStats))
                                {
                                    <div class="match-score @(score > SelectedPlayerForStats.Points / 5 ? "high" : "low")">
                                        @score
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer border-0">
                    <button type="button" class="btn btn-secondary rounded-pill" @onclick="ClosePlayerStats">
                        @LanguageService.GetTranslation("CloseStats")
                    </button>
                    @if (!SelectedPlayers.Contains(SelectedPlayerForStats) && CanSelectPlayer(SelectedPlayerForStats))
                    {
                        <button type="button" class="btn btn-primary rounded-pill" @onclick="() => SelectPlayerFromStats()">
                            <i class="fas fa-plus me-2"></i>
                            @LanguageService.GetTranslation("SelectPlayer")
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
}

@if (ShowDeleteConfirmation)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" @onclick="() => ShowDeleteConfirmation = false">
        <div class="modal-dialog modal-dialog-centered" @onclick:stopPropagation>
            <div class="modal-content rounded-4">
                <div class="modal-header border-0">
                    <h5 class="modal-title">@LanguageService.GetTranslation("DeleteTeamConfirmation")</h5>
                    <button type="button" class="btn-close" @onclick="() => ShowDeleteConfirmation = false"></button>
                </div>
                <div class="modal-body">
                    <p>@LanguageService.GetTranslation("DeleteTeamMessage")</p>
                </div>
                <div class="modal-footer border-0">
                    <button type="button" class="btn btn-secondary rounded-pill" @onclick="CancelDeleteTeam">
                        @LanguageService.GetTranslation("Cancel")
                    </button>
                    <button type="button" class="btn btn-danger rounded-pill" @onclick="DeleteTeam">
                        @LanguageService.GetTranslation("Delete")
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .stats-card {
        transition: transform 0.2s;
    }

    .stats-card:hover {
        transform: translateY(-5px);
    }

    .player-card {
        background: white;
        border-radius: 1rem;
        padding: 1rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
        cursor: pointer;
        border: 2px solid transparent;
    }

    .player-card:hover:not(.disabled) {
        transform: translateY(-5px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }

    .player-card.selected {
        border-color: var(--bs-primary);
        background-color: var(--bs-primary-bg-subtle);
    }

    .player-card.disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .player-initial {
        width: 48px;
        height: 48px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.2rem;
        font-weight: bold;
        color: white;
        margin-bottom: 0.5rem;
    }

    .role-batsman { background: linear-gradient(135deg, #FF6B6B, #FF8787); }
    .role-bowler { background: linear-gradient(135deg, #4DABF7, #74C0FC); }
    .role-allrounder { background: linear-gradient(135deg, #51CF66, #69DB7C); }
    .role-keeper { background: linear-gradient(135deg, #FAB005, #FFD43B); }

    .team-badge, .price-badge, .points-badge, .role-badge {
        font-size: 0.8rem;
        padding: 0.2rem 0.5rem;
        border-radius: 1rem;
    }

    .team-badge {
        background-color: var(--bs-gray-200);
        color: var(--bs-gray-700);
    }

    .price-badge {
        background-color: var(--bs-warning-bg-subtle);
        color: var(--bs-warning);
    }

    .points-badge {
        background-color: var(--bs-success-bg-subtle);
        color: var(--bs-success);
    }

    .role-badge {
        background-color: var(--bs-info-bg-subtle);
        color: var(--bs-info);
    }

    .player-chip {
        display: inline-flex;
        align-items: center;
        padding: 0.25rem;
        margin: 0.25rem;
        gap: 0.5rem;
        background: white;
        border: 1px solid #dee2e6;
        transition: all 0.2s;
    }

    .player-chip:hover {
        background: var(--bs-danger-bg-subtle);
        border-color: var(--bs-danger);
    }

    .player-chip .player-initial {
        width: 32px;
        height: 32px;
        font-size: 0.9rem;
        margin: 0;
    }

    .player-chip .player-name {
        font-weight: 500;
    }

    .player-chip .player-team {
        font-size: 0.8rem;
        color: var(--bs-secondary);
    }

    .team-card {
        background: white;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: transform 0.2s;
    }

    .team-card:hover {
        transform: translateY(-5px);
    }

    .team-header {
        padding: 1rem;
        border-bottom: 1px solid #dee2e6;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .team-body {
        padding: 1rem;
    }

    .complete-team-overlay {
        animation: slideUp 0.3s ease-out;
    }

    @@keyframes slideUp {
        from { transform: translateY(20px); opacity: 0; }
        to { transform: translateY(0); opacity: 1; }
    }

    /* RTL Support */
    :root[dir="rtl"] .player-card,
    :root[dir="rtl"] .team-card,
    :root[dir="rtl"] .player-chip {
        text-align: right;
    }

    :root[dir="rtl"] .player-chip {
        flex-direction: row-reverse;
    }

    :root[dir="rtl"] .team-header {
        flex-direction: row-reverse;
    }

    :root[dir="rtl"] .nav-pills {
        padding-right: 0;
    }

    :root[dir="rtl"] .me-2 {
        margin-right: 0 !important;
        margin-left: 0.5rem !important;
    }

    :root[dir="rtl"] .ms-1,
    :root[dir="rtl"] .ms-2 {
        margin-left: 0 !important;
        margin-right: 0.5rem !important;
    }

    :root[dir="rtl"] .float-end {
        float: left !important;
    }

    :root[dir="rtl"] .modal-header .btn-close {
        margin: calc(-.5 * var(--bs-modal-header-padding-y)) auto calc(-.5 * var(--bs-modal-header-padding-y)) calc(-.25 * var(--bs-modal-header-padding-x));
    }

    :root[dir="rtl"] .modal-footer {
        flex-direction: row-reverse;
    }

    :root[dir="rtl"] .form-select {
        background-position: left 0.75rem center;
        padding-right: 0.75rem;
        padding-left: 2.25rem;
    }

    .last-matches {
        display: flex;
        gap: 0.5rem;
        margin-top: 1rem;
    }

    .match-score {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        color: white;
    }

    .match-score.high {
        background: linear-gradient(135deg, #28a745, #34ce57);
    }

    .match-score.low {
        background: linear-gradient(135deg, #dc3545, #e4606d);
    }
</style>

@code {
    private string TeamName { get; set; } = "";
    private List<Models.Player> SelectedPlayers { get; set; } = new();
    private List<Models.Team> Teams { get; set; } = new();
    private string SelectedCategory = "All";
    private decimal TotalBudget { get; set; } // Will be set from wallet balance
    private decimal TeamCreationCost = 100.0M;
    private bool ShowInsufficientFundsModal { get; set; }
    private string CaptainId { get; set; } = "";
    private string ViceCaptainId { get; set; } = "";
    private string SearchQuery { get; set; } = "";
    private string TeamFilter { get; set; } = "";
    private string SortBy { get; set; } = "points";
    private List<Models.Player> AvailablePlayers { get; set; } = new();
    private bool IsLoading { get; set; } = true;
    private bool IsSaving { get; set; } = false;
    private bool ShowDeleteConfirmation { get; set; } = false;
    private Models.Team TeamToDelete { get; set; } = null!;
    
    private Models.Player? Captain => SelectedPlayers.FirstOrDefault(p => p.Id.ToString() == CaptainId);
    private Models.Player? ViceCaptain => SelectedPlayers.FirstOrDefault(p => p.Id.ToString() == ViceCaptainId);
    
    private List<string> PlayerCategories = new()
    {
        "All", "Batsman", "Bowler", "All-rounder", "Wicket-keeper"
    };

    private decimal RemainingBudget => TotalBudget - SelectedPlayers.Sum(p => p.Price);
    private int CurrentPoints => SelectedPlayers.Sum(p => p.Points);
    
    protected override async Task OnInitializedAsync()
    {
        WalletService.OnBalanceChanged += OnWalletBalanceChanged;
        
        IsLoading = true;
        
        // Load wallet balance for budget
        await LoadWalletBalance();
        
        // Load players from database
        AvailablePlayers = await PlayerService.GetAllPlayersAsync();
        
        // Load user teams from database
        Teams = await TeamService.GetUserTeamsAsync();
        
        IsLoading = false;
    }

    private async Task LoadWalletBalance()
    {
        // Get wallet balance from service
        var walletBalance = await WalletService.GetBalanceAsync();
        
        // Set the TotalBudget based on wallet balance
        TotalBudget = walletBalance;
    }

    private async void OnWalletBalanceChanged()
    {
        // Reload wallet balance when it changes
        await LoadWalletBalance();
        StateHasChanged();
    }

    public void Dispose()
    {
        WalletService.OnBalanceChanged -= OnWalletBalanceChanged;
    }

    private IEnumerable<Models.Player> GetFilteredPlayers()
    {
        var players = AvailablePlayers.AsEnumerable();

        // Apply category filter
        if (SelectedCategory != "All")
        {
            players = players.Where(p => p.Role == SelectedCategory);
        }

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(SearchQuery))
        {
            players = players.Where(p => 
                p.Name.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                p.Team.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                p.Role.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase));
        }

        // Apply team filter
        if (!string.IsNullOrWhiteSpace(TeamFilter))
        {
            players = players.Where(p => p.Team == TeamFilter);
        }

        // Apply sorting
        players = SortBy switch
        {
            "points" => players.OrderByDescending(p => p.Points),
            "price" => players.OrderByDescending(p => p.Price),
            "name" => players.OrderBy(p => p.Name),
            _ => players
        };

        return players;
    }

    private string GetInitials(string name)
    {
        return string.Join("", name.Split(' ').Select(n => n[0]));
    }

    private string GetRoleClass(string role) => role.ToLower() switch
    {
        "batsman" => "role-batsman",
        "bowler" => "role-bowler",
        "all-rounder" => "role-allrounder",
        "wicket-keeper" => "role-keeper",
        _ => ""
    };

    private string GetCategoryIcon(string category) => category.ToLower() switch
    {
        "batsman" => "fas fa-bolt",
        "bowler" => "fas fa-baseball-ball",
        "all-rounder" => "fas fa-medal",
        "wicket-keeper" => "fas fa-hands",
        _ => "fas fa-users"
    };

    private bool CanSelectPlayer(Models.Player player)
    {
        // First check the wallet budget
        if (SelectedPlayers.Sum(p => p.Price) + player.Price > TotalBudget)
        {
            return false;
        }
        
        return TeamService.CanSelectPlayer(player, SelectedPlayers, RemainingBudget);
    }
    
    private void TogglePlayerSelection(Models.Player player)
    {
        if (SelectedPlayers.Contains(player))
        {
            if (player == Captain)
            {
                CaptainId = "";
            }
            if (player == ViceCaptain)
            {
                ViceCaptainId = "";
            }
            SelectedPlayers.Remove(player);
        }
        else if (CanSelectPlayer(player))
        {
            // Check if adding this player would exceed the wallet budget
            if (TotalBudget - (SelectedPlayers.Sum(p => p.Price) + player.Price) < 0)
            {
                ToastService.ShowWarning(LanguageService.GetTranslation("InsufficientBudget"));
                return;
            }
            
            SelectedPlayers.Add(player);
        }
        StateHasChanged();
    }

    private bool ValidateTeamComposition()
    {
        return TeamService.ValidateTeamComposition(SelectedPlayers);
    }

    private bool CanSaveTeam()
    {
        return !string.IsNullOrWhiteSpace(TeamName) && 
               SelectedPlayers.Count == 11 && 
               RemainingBudget >= 0 &&
               Captain != null &&
               ViceCaptain != null &&
               Captain != ViceCaptain &&
               ValidateTeamComposition();
    }
    
    private async Task SaveTeam()
    {
        if (!CanSaveTeam()) return;

        // Check if user has sufficient funds
        if (!WalletService.HasSufficientFunds(TeamCreationCost))
        {
            ShowInsufficientFundsModal = true;
            return;
        }
        
        try
        {
            IsSaving = true;
            StateHasChanged();
            
            var newTeam = new Models.Team
            {
                Name = TeamName,
                Description = $"Created on {DateTime.Now:yyyy-MM-dd}",
                LogoUrl = Models.Team.GetDefaultLogoUrl(TeamName),
                Credits = (int)RemainingBudget,
                Points = CurrentPoints,
                IsComplete = true
            };
            
            var playerIds = SelectedPlayers.Select(p => p.Id).ToList();
            var captainId = int.Parse(CaptainId);
            var viceCaptainId = int.Parse(ViceCaptainId);
            
            // Create team in database
            var createdTeam = await TeamService.CreateTeamAsync(newTeam, playerIds, captainId, viceCaptainId);
            
            // Deduct team creation cost from wallet
            var success = WalletService.DeductFunds(
                TeamCreationCost,
                $"Team Creation: {newTeam.Name}"
            );

            if (success)
            {
                // Add to local list
                Teams.Add(createdTeam);

                // Reset form
                TeamName = "";
                SelectedPlayers.Clear();
                CaptainId = "";
                ViceCaptainId = "";

                // Show success message
                ToastService.ShowSuccess(LanguageService.GetTranslation("TeamCreatedSuccess"));
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error creating team: {ex.Message}");
        }
        finally
        {
            IsSaving = false;
            StateHasChanged();
        }
    }
    
    private void ConfirmDeleteTeam(Models.Team team)
    {
        TeamToDelete = team;
        ShowDeleteConfirmation = true;
        StateHasChanged();
    }
    
    private void CancelDeleteTeam()
    {
        ShowDeleteConfirmation = false;
        TeamToDelete = null!;
        StateHasChanged();
    }
    
    private async Task DeleteTeam()
    {
        if (TeamToDelete == null) return;
        
        var success = await TeamService.DeleteTeamAsync(TeamToDelete.Id);
        if (success)
        {
            Teams.Remove(TeamToDelete);
            ToastService.ShowSuccess(LanguageService.GetTranslation("TeamDeletedSuccess"));
        }
        else
        {
            ToastService.ShowError(LanguageService.GetTranslation("TeamDeleteFailed"));
        }
        
        ShowDeleteConfirmation = false;
        TeamToDelete = null!;
        StateHasChanged();
    }

    private void NavigateToWallet()
    {
        ShowInsufficientFundsModal = false;
        NavigationManager.NavigateTo("wallet");
    }

    private Models.Player? SelectedPlayerForStats { get; set; }

    private void ShowPlayerStats(Models.Player player)
    {
        SelectedPlayerForStats = player;
    }

    private void ClosePlayerStats()
    {
        SelectedPlayerForStats = null;
        StateHasChanged();
    }

    private void SelectPlayerFromStats()
    {
        if (SelectedPlayerForStats != null)
        {
            TogglePlayerSelection(SelectedPlayerForStats);
            ClosePlayerStats();
        }
    }

    private int GetAveragePoints(Models.Player player)
    {
        // Mock data - in a real app, this would come from a database
        var random = new Random(player.Id); // Use player ID as seed for consistent results
        return (int)(player.Points * 0.8 + random.Next(-50, 50));
    }

    private int GetSelectionRate(Models.Player player)
    {
        // Mock data - in a real app, this would come from a database
        var random = new Random(player.Id); // Use player ID as seed for consistent results
        return random.Next(20, 85);
    }

    private List<int> GetLastMatchScores(Models.Player player)
    {
        // Mock data - in a real app, this would come from a database
        var random = new Random(player.Id); // Use player ID as seed for consistent results
        var scores = new List<int>();
        for (int i = 0; i < 5; i++)
        {
            scores.Add((int)(player.Points * (0.7 + random.NextDouble() * 0.6)));
        }
        return scores;
    }

    // Add a method to handle clicks on the modal backdrop
    private void HandleBackdropClick()
    {
        ClosePlayerStats();
    }
} 