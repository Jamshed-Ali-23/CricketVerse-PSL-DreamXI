@page "/login"
@using CricketVerse.Services
@inject NavigationManager NavigationManager
@inject CustomAuthenticationStateProvider AuthStateProvider
@inject ToastService ToastService
@inject LanguageService LanguageService

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm rounded-4">
                <div class="card-body p-4">
                    <h2 class="text-center mb-4">@LanguageService.GetTranslation("Login")</h2>

                    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label">@LanguageService.GetTranslation("UsernameOrEmail")</label>
                            <InputText @bind-Value="loginModel.Username" class="form-control" />
                            <ValidationMessage For="@(() => loginModel.Username)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">@LanguageService.GetTranslation("Password")</label>
                            <div class="input-group">
                                <InputText @bind-Value="loginModel.Password" 
                                         type="@(showPassword ? "text" : "password")" 
                                         class="form-control" />
                                <button type="button" class="btn btn-outline-secondary" @onclick="TogglePasswordVisibility">
                                    <i class="fas @(showPassword ? "fa-eye-slash" : "fa-eye")"></i>
                                </button>
                            </div>
                            <ValidationMessage For="@(() => loginModel.Password)" />
                        </div>

                        <div class="mb-3 form-check">
                            <InputCheckbox @bind-Value="loginModel.RememberMe" class="form-check-input" id="rememberMe" />
                            <label class="form-check-label" for="rememberMe">
                                @LanguageService.GetTranslation("RememberMe")
                            </label>
                        </div>

                        <button type="submit" class="btn btn-primary w-100 mb-3" disabled="@isProcessing">
                            @if (isProcessing)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                                <span>@LanguageService.GetTranslation("Processing")</span>
                            }
                            else
                            {
                                <span>@LanguageService.GetTranslation("Login")</span>
                            }
                        </button>

                        <div class="text-center">
                            <span>@LanguageService.GetTranslation("NoAccount")</span>
                            <a href="register" class="ms-1">@LanguageService.GetTranslation("Register")</a>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private bool isProcessing;
    private bool showPassword;

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private async Task HandleLogin()
    {
        if (isProcessing) return;

        try
        {
            isProcessing = true;

            var result = await AuthStateProvider.LoginUser(
                loginModel.Username,
                loginModel.Password
            );

            if (result.Success)
            {
                ToastService.ShowSuccess(LanguageService.GetTranslation("LoginSuccess"));
                NavigationManager.NavigateTo("/");
            }
            else
            {
                ToastService.ShowError(result.Message);
            }
        }
        finally
        {
            isProcessing = false;
        }
    }

    private class LoginModel
    {
        [Required(ErrorMessage = "Username or Email is required")]
        public string Username { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = "";

        public bool RememberMe { get; set; }
    }
} 