@page "/register"
@using CricketVerse.Services
@using CricketVerse.Models
@inject NavigationManager NavigationManager
@inject CustomAuthenticationStateProvider AuthStateProvider
@inject LanguageService LanguageService
@inject ToastService ToastService

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm rounded-4 @(ThemeService.CurrentTheme == "dark" ? "bg-dark text-light" : "")">
                <div class="card-body p-4">
                    <h2 class="text-center mb-4">@LanguageService.GetTranslation("Register")</h2>

                    <EditForm Model="@registrationModel" OnValidSubmit="HandleRegistration">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label">@LanguageService.GetTranslation("Username")</label>
                            <InputText @bind-Value="registrationModel.Username" 
                                     class="@($"form-control {(ThemeService.CurrentTheme == "dark" ? "bg-dark text-light" : "")}")" />
                            <ValidationMessage For="@(() => registrationModel.Username)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">@LanguageService.GetTranslation("Email")</label>
                            <InputText @bind-Value="registrationModel.Email" 
                                     class="@($"form-control {(ThemeService.CurrentTheme == "dark" ? "bg-dark text-light" : "")}")" />
                            <ValidationMessage For="@(() => registrationModel.Email)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">@LanguageService.GetTranslation("Password")</label>
                            <div class="input-group">
                                <InputText @bind-Value="registrationModel.Password" 
                                         type="@(showPassword ? "text" : "password")"
                                         class="@($"form-control {(ThemeService.CurrentTheme == "dark" ? "bg-dark text-light" : "")}")" />
                                <button type="button" class="btn btn-outline-secondary" @onclick="TogglePasswordVisibility">
                                    <i class="fas @(showPassword ? "fa-eye-slash" : "fa-eye")"></i>
                                </button>
                            </div>
                            <ValidationMessage For="@(() => registrationModel.Password)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">@LanguageService.GetTranslation("ConfirmPassword")</label>
                            <div class="input-group">
                                <InputText @bind-Value="registrationModel.ConfirmPassword" 
                                         type="@(showConfirmPassword ? "text" : "password")"
                                         class="@($"form-control {(ThemeService.CurrentTheme == "dark" ? "bg-dark text-light" : "")}")" />
                                <button type="button" class="btn btn-outline-secondary" @onclick="ToggleConfirmPasswordVisibility">
                                    <i class="fas @(showConfirmPassword ? "fa-eye-slash" : "fa-eye")"></i>
                                </button>
                            </div>
                            <ValidationMessage For="@(() => registrationModel.ConfirmPassword)" />
                        </div>

                        <button type="submit" class="btn btn-primary w-100 mb-3" disabled="@isProcessing">
                            @if (isProcessing)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                                <span>@LanguageService.GetTranslation("Processing")</span>
                            }
                            else
                            {
                                <span>@LanguageService.GetTranslation("Register")</span>
                            }
                        </button>

                        <div class="text-center">
                            <span>@LanguageService.GetTranslation("AlreadyHaveAccount")</span>
                            <a href="login" class="ms-1">@LanguageService.GetTranslation("Login")</a>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegistrationModel registrationModel = new();
    private bool isProcessing;
    private bool showPassword;
    private bool showConfirmPassword;
    [Inject] private ThemeService ThemeService { get; set; } = default!;

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private void ToggleConfirmPasswordVisibility()
    {
        showConfirmPassword = !showConfirmPassword;
    }

    private async Task HandleRegistration()
    {
        if (isProcessing) return;

        try
        {
            isProcessing = true;

            if (registrationModel.Password != registrationModel.ConfirmPassword)
            {
                ToastService.ShowError(LanguageService.GetTranslation("PasswordsDoNotMatch"));
                return;
            }

            var result = await AuthStateProvider.RegisterUser(
                registrationModel.Username,
                registrationModel.Email,
                registrationModel.Password
            );

            if (result.Success)
            {
                ToastService.ShowSuccess(LanguageService.GetTranslation("RegistrationSuccess"));
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                ToastService.ShowError(result.Message);
            }
        }
        finally
        {
            isProcessing = false;
        }
    }

    private class RegistrationModel
    {
        [Required(ErrorMessage = "Username is required")]
        [StringLength(50, MinimumLength = 3, ErrorMessage = "Username must be between 3 and 50 characters")]
        public string Username { get; set; } = "";

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be at least 6 characters")]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Confirm Password is required")]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = "";
    }
} 